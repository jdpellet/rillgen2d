{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"rillgen2d \u00b6 Code, example data, and manuscript supplemental materials which accompany Pelletier, JD, XXX Authors: Jon D Pelletier , Nate Abramson Software Developers: Jacob van der Leeuw , Elliot Hagyard UX Testing: Tyson Lee Swetnam Contents \u00b6 The repository is organized (in the attempt) to enable reproducible research as part of the FAIR data principles . You can (re)run these analyses using your own computer, on commercial cloud, or a data science workbench CyVerse Discovery Environment. Installation \u00b6 While rillgen2d is written in C, it leverages geospatial data formats like GeoTIFF, requiring software like GDAL, GEOS, and PROJ for projection management. The user interface is built with Python 3 and Streamlit. Prerequisites: Miniconda/Anaconda: We recommend installing Miniconda or Anaconda for managing dependencies. Installation Methods: Windows 10: Install Script (Recommended): Download the repository and locate the scripts\\install_windows.bat file. Run the script. It will guide you through installing Miniconda and setting up the conda environment. After installation, open the Anaconda Prompt, activate the environment with conda activate rillgen2d , navigate to the project folder, and run the application using python run.py . Access the GUI at http://localhost:5000 in your browser. Manual Installation: Install Miniconda and download the repository. Open the Anaconda Prompt, navigate to the project folder, and create/activate the environment: conda env create -f environment_windows . yml conda activate rillgen2d Launch the application with python run.py and access the GUI at http://localhost:5000 . Linux and Mac OS X: Open a terminal and create/activate the environment: conda env create -f environment_linux.yml #conda env create -f environment_macos.yml conda activate rillgen2d Start the GUI: python run.py Docker: (Coming Soon) Download Source Code \u00b6 Release versions are available on the Releases page. To clone the repository: git clone https://github.com/jdpellet/rillgen2d cd rillgen2d Current version is maintained on main branch Debugging Tips \u00b6 Ensure you're using Python 3.11 or later: python3 --version If environment creation is slow, consider using mamba : conda install -n base mamba mamba env create -f environment_windows.yml # (or environment_linux.yml) # (or environment_macos.yml) Note: On Linux, parameter values might display with a newline character ( \\n ). This is expected behavior, and you should leave it as is while updating values. Use code with caution.","title":"Introduction"},{"location":"#rillgen2d","text":"Code, example data, and manuscript supplemental materials which accompany Pelletier, JD, XXX Authors: Jon D Pelletier , Nate Abramson Software Developers: Jacob van der Leeuw , Elliot Hagyard UX Testing: Tyson Lee Swetnam","title":"rillgen2d"},{"location":"#contents","text":"The repository is organized (in the attempt) to enable reproducible research as part of the FAIR data principles . You can (re)run these analyses using your own computer, on commercial cloud, or a data science workbench CyVerse Discovery Environment.","title":"Contents"},{"location":"#installation","text":"While rillgen2d is written in C, it leverages geospatial data formats like GeoTIFF, requiring software like GDAL, GEOS, and PROJ for projection management. The user interface is built with Python 3 and Streamlit. Prerequisites: Miniconda/Anaconda: We recommend installing Miniconda or Anaconda for managing dependencies. Installation Methods: Windows 10: Install Script (Recommended): Download the repository and locate the scripts\\install_windows.bat file. Run the script. It will guide you through installing Miniconda and setting up the conda environment. After installation, open the Anaconda Prompt, activate the environment with conda activate rillgen2d , navigate to the project folder, and run the application using python run.py . Access the GUI at http://localhost:5000 in your browser. Manual Installation: Install Miniconda and download the repository. Open the Anaconda Prompt, navigate to the project folder, and create/activate the environment: conda env create -f environment_windows . yml conda activate rillgen2d Launch the application with python run.py and access the GUI at http://localhost:5000 . Linux and Mac OS X: Open a terminal and create/activate the environment: conda env create -f environment_linux.yml #conda env create -f environment_macos.yml conda activate rillgen2d Start the GUI: python run.py Docker: (Coming Soon)","title":"Installation"},{"location":"#download-source-code","text":"Release versions are available on the Releases page. To clone the repository: git clone https://github.com/jdpellet/rillgen2d cd rillgen2d Current version is maintained on main branch","title":"Download Source Code"},{"location":"#debugging-tips","text":"Ensure you're using Python 3.11 or later: python3 --version If environment creation is slow, consider using mamba : conda install -n base mamba mamba env create -f environment_windows.yml # (or environment_linux.yml) # (or environment_macos.yml) Note: On Linux, parameter values might display with a newline character ( \\n ). This is expected behavior, and you should leave it as is while updating values. Use code with caution.","title":"Debugging Tips"},{"location":"c/","text":"Compling rillgen.c \u00b6 Rillgen2D is written in C The code is compiled by the Python script when the program is run. To compile the C code outside of python, you can use gcc in Linux or Mac OS X gcc -Wall -shared -fPIC rillgen2d.c -o rillgen2d.so To compile the C code outside of Python on Windows 10: gcc -o rillgen2d.exe rillgen2d.c Developer Documentation \u00b6 Understanding the rillgen.c Code \u00b6 The provided rillgen.c code implements the core logic of the Rillgen2d model, which simulates rill erosion processes on a digital elevation model (DEM). The code is quite complex and involves various algorithms and calculations. Here's a breakdown of its key components: 1. Data Structures and Initialization: Grids and Variables: The code defines several 2D grids (matrices) to store information such as topography ( topo ), slope ( slope ), rainfall ( rain ), contributing area ( area ), discharge ( discharge ), depth ( depth ), incised depth ( inciseddepth ), erosion ( eroded ), shear stress ( tau ), maximum shear stress ( maxtau ), flow direction ( angle ), and various factors used in calculations. Input Parameters: Parameters such as flags for different model options, grid dimensions ( lattice_size_x , lattice_size_y ), cell size ( deltax ), Manning's n ( manningsn ), and various coefficients are read from the input.txt file. Neighboring Cells: The setupgridneighbors function defines arrays to efficiently access neighboring cells in the grid. 2. Hydrologic Correction (Priority-Flood): priority_flood_epsilon Function: Implements a priority-flood algorithm to fill pits and flats in the DEM, ensuring proper drainage for subsequent calculations. Priority Queue: The algorithm utilizes a priority queue to efficiently process cells based on their elevation. Epsilon Filling: Cells identified as pits or flats are filled by incrementally raising their elevation ( fillincrement ) until they drain to a lower neighbor. 3. Slope Calculation and Smoothing: calculateslope Function: Calculates the slope at each cell using a central difference scheme and determines the flow direction based on the steepest descent. smoothslope Function: Optionally smooths the calculated slope using a moving window average to reduce the impact of noise or artifacts in the DEM. 4. Flow Routing: Routing Options: The code supports three flow routing methods: Multiple Flow Direction (MFD), D-infinity, and a depth-based approach. The chosen method is determined by the flagforroutingmethod parameter. MFD Routing: mfdflowrouteorig , mfdroutefordischarge functions: Distribute flow from each cell to its downhill neighbors based on the steepest descent and a weighting factor determined by the elevation difference. D-infinity Routing: dinfflowrouteorig function: Determines the flow direction based on the steepest slope within eight possible directions and distributes flow accordingly. Depth-Based Routing: initialguessforrouting , calculatedischargefluxes , routing functions: Iteratively solve for flow depths and discharge using the Manning's equation and the MFD routing scheme, updating the topography until convergence is reached. 5. Rill Erosion and Shear Stress Calculation: calculatedischarge Function: Calculates the discharge at each cell based on the chosen routing method and the contributing area. Shear Stress: Calculates the shear stress exerted by the flow at each cell, considering the slope, discharge, and rill width. Critical Shear Stress: Determines the critical shear stress for soil and rock armor layers based on input parameters and empirical equations. Rill Erodibility: In the dynamic mode, the code simulates rill erosion over multiple time steps, calculating the incision depth and sediment yield based on the excess shear stress and rill erodibility parameters. 6. Output Generation: f1.txt , f2.txt : Store the factor of safety against rill initiation and the ratio of rock thickness to flow depth, respectively. tau.txt : Stores the maximum shear stress experienced at each cell. rills.ppm : Generates a PPM image visualizing the spatial distribution of rill erosion potential. inciseddepth.txt (Dynamic Mode): Stores the cumulative incision depth due to rill erosion at each cell. In summary, the rillgen.c code implements a complex model for simulating rill erosion processes on a DEM. It involves hydrologic correction, slope analysis, flow routing, shear stress calculations, and erosion modeling to predict the locations and intensity of rill development.","title":"C"},{"location":"c/#compling-rillgenc","text":"Rillgen2D is written in C The code is compiled by the Python script when the program is run. To compile the C code outside of python, you can use gcc in Linux or Mac OS X gcc -Wall -shared -fPIC rillgen2d.c -o rillgen2d.so To compile the C code outside of Python on Windows 10: gcc -o rillgen2d.exe rillgen2d.c","title":"Compling rillgen.c"},{"location":"c/#developer-documentation","text":"","title":"Developer Documentation"},{"location":"c/#understanding-the-rillgenc-code","text":"The provided rillgen.c code implements the core logic of the Rillgen2d model, which simulates rill erosion processes on a digital elevation model (DEM). The code is quite complex and involves various algorithms and calculations. Here's a breakdown of its key components: 1. Data Structures and Initialization: Grids and Variables: The code defines several 2D grids (matrices) to store information such as topography ( topo ), slope ( slope ), rainfall ( rain ), contributing area ( area ), discharge ( discharge ), depth ( depth ), incised depth ( inciseddepth ), erosion ( eroded ), shear stress ( tau ), maximum shear stress ( maxtau ), flow direction ( angle ), and various factors used in calculations. Input Parameters: Parameters such as flags for different model options, grid dimensions ( lattice_size_x , lattice_size_y ), cell size ( deltax ), Manning's n ( manningsn ), and various coefficients are read from the input.txt file. Neighboring Cells: The setupgridneighbors function defines arrays to efficiently access neighboring cells in the grid. 2. Hydrologic Correction (Priority-Flood): priority_flood_epsilon Function: Implements a priority-flood algorithm to fill pits and flats in the DEM, ensuring proper drainage for subsequent calculations. Priority Queue: The algorithm utilizes a priority queue to efficiently process cells based on their elevation. Epsilon Filling: Cells identified as pits or flats are filled by incrementally raising their elevation ( fillincrement ) until they drain to a lower neighbor. 3. Slope Calculation and Smoothing: calculateslope Function: Calculates the slope at each cell using a central difference scheme and determines the flow direction based on the steepest descent. smoothslope Function: Optionally smooths the calculated slope using a moving window average to reduce the impact of noise or artifacts in the DEM. 4. Flow Routing: Routing Options: The code supports three flow routing methods: Multiple Flow Direction (MFD), D-infinity, and a depth-based approach. The chosen method is determined by the flagforroutingmethod parameter. MFD Routing: mfdflowrouteorig , mfdroutefordischarge functions: Distribute flow from each cell to its downhill neighbors based on the steepest descent and a weighting factor determined by the elevation difference. D-infinity Routing: dinfflowrouteorig function: Determines the flow direction based on the steepest slope within eight possible directions and distributes flow accordingly. Depth-Based Routing: initialguessforrouting , calculatedischargefluxes , routing functions: Iteratively solve for flow depths and discharge using the Manning's equation and the MFD routing scheme, updating the topography until convergence is reached. 5. Rill Erosion and Shear Stress Calculation: calculatedischarge Function: Calculates the discharge at each cell based on the chosen routing method and the contributing area. Shear Stress: Calculates the shear stress exerted by the flow at each cell, considering the slope, discharge, and rill width. Critical Shear Stress: Determines the critical shear stress for soil and rock armor layers based on input parameters and empirical equations. Rill Erodibility: In the dynamic mode, the code simulates rill erosion over multiple time steps, calculating the incision depth and sediment yield based on the excess shear stress and rill erodibility parameters. 6. Output Generation: f1.txt , f2.txt : Store the factor of safety against rill initiation and the ratio of rock thickness to flow depth, respectively. tau.txt : Stores the maximum shear stress experienced at each cell. rills.ppm : Generates a PPM image visualizing the spatial distribution of rill erosion potential. inciseddepth.txt (Dynamic Mode): Stores the cumulative incision depth due to rill erosion at each cell. In summary, the rillgen.c code implements a complex model for simulating rill erosion processes on a DEM. It involves hydrologic correction, slope analysis, flow routing, shear stress calculations, and erosion modeling to predict the locations and intensity of rill development.","title":"Understanding the rillgen.c Code"},{"location":"data/","text":"Local files \u00b6 Rillgen2D will run on GeoTiff (.tif) images with coordinate reference system (CRS) metadata. Rasters that are missing or have no projection will not use a CRS. You can select from your local computer any *.tif file using the Upload a file button. Download files from URL \u00b6 Users can also select URLs from public elevation datasets such as those from OpenTopography.org jobs. Results files from URL can be in either *.tif or in *.tar.gz (compressed) format. Rillgen2d will unzip the *.tif file from the tarball. Best Practices \u00b6 Raster sizes \u00b6 In general, the larger the file, the longer it will take to process it. Rillgen2d does use some multi-threading capability to process data, but some steps are single threaded and can take a significant amount of time to run. Rasters up to 50,000 x 50,000 pixels have been successfully tested on RillGen2D on large Linux workstations. Hydrological corrections \u00b6 Running the hydrological correction for pit filling will add time to your model run.","title":"Data"},{"location":"data/#local-files","text":"Rillgen2D will run on GeoTiff (.tif) images with coordinate reference system (CRS) metadata. Rasters that are missing or have no projection will not use a CRS. You can select from your local computer any *.tif file using the Upload a file button.","title":"Local files"},{"location":"data/#download-files-from-url","text":"Users can also select URLs from public elevation datasets such as those from OpenTopography.org jobs. Results files from URL can be in either *.tif or in *.tar.gz (compressed) format. Rillgen2d will unzip the *.tif file from the tarball.","title":"Download files from URL"},{"location":"data/#best-practices","text":"","title":"Best Practices"},{"location":"data/#raster-sizes","text":"In general, the larger the file, the longer it will take to process it. Rillgen2d does use some multi-threading capability to process data, but some steps are single threaded and can take a significant amount of time to run. Rasters up to 50,000 x 50,000 pixels have been successfully tested on RillGen2D on large Linux workstations.","title":"Raster sizes"},{"location":"data/#hydrological-corrections","text":"Running the hydrological correction for pit filling will add time to your model run.","title":"Hydrological corrections"},{"location":"gui/","text":"User Interface \u00b6 Interface Overview: \u00b6 The Rillgen2d interface consists of two tabs: Parameters: This tab allows you to input a DEM file, adjust model parameters, and control the execution of the simulation. User Manual: Provides detailed information about the model, parameters, and interpretation of results. Running a Simulation: \u00b6 Input DEM: Web URL: Enter the URL of a GeoTIFF DEM file hosted online. Local File: Upload a GeoTIFF DEM file from your local machine. Generate Parameters: Click the \"Generate Parameters\" button to read the DEM and populate the parameter fields. Adjust Parameters: Review the default parameter values and modify them as needed based on your specific case and the information available in the User Manual. Parameters are organized into sections for model mode, routing methods, erosion properties, and hydrologic and numerical settings. Run Rillgen2d: Click the \"Run Rillgen2d\" button to start the simulation. Monitor Progress: The console output will display progress messages and any errors that occur. View Outputs: Preview: A hillshade image of the input DEM will be displayed for visual inspection. Map: An interactive map with layers for hillshade, rills, and tau (shear stress) will be generated. You can toggle layers and zoom in/out to explore the results. Save Output: Click the \"Save Output\" button to save the generated files (map, images, parameter settings) to a timestamped folder. Additional Tips: \u00b6 Refer to the User Manual for detailed explanations of the parameters and their implications. Experiment with different parameter settings to understand their effects on the model outputs. Consider the limitations of the model and the uncertainties associated with the input data and parameters. By following these steps and referring to the available documentation, you can effectively use the Rillgen2d Streamlit application to analyze rill erosion potential and gain insights into landscape processes. Input Parameters \u00b6 Input Parameters for rillgen.c \u00b6 The input.txt file provides the necessary parameters for configuring and running the Rillgen2d model. Each line in the file specifies a parameter name, its value, and a brief description. Here's a breakdown of the parameters: 1. Model Mode and Routing: flagformode : Determines the model mode: 0: Static uniform rainfall with simple outputs (calculates factor of safety and rock thickness ratios). 1: Rainfall variable in space and/or time with complex outputs (simulates rill erosion and sediment yield). flagforroutingmethod : Specifies the flow routing method: 0: Multiple Flow Direction (MFD) 1: Depth-based routing 2: D-infinity 2. Shear Stress and Erosion Parameters: flagforshearstressequation : Selects the equation for calculating critical shear stress of rock armor: 0: Haws and Erickson (2020) equation 1: Pelletier et al. (in press) equation flagformask : Indicates whether a mask is used to define the active modeling area: 0: No mask (entire DEM is considered) 1: Mask provided (cells with mask value 0 are ignored) flagfortaucsoilandveg : Specifies whether a raster for soil and vegetation critical shear stress is used: 0: Fixed value ( taucsoilandvegfixed ) is applied 1: Raster file provides spatially varying values flagford50 : Controls the use of a raster for rock armor median diameter (d50): 0: Fixed value ( d50fixed ) is applied 1: Raster file provides spatially varying d50 values flagforrockthickness : Determines if a raster for rock armor thickness is used: 0: Fixed value ( rockthicknessfixed ) is applied 1: Raster file provides spatially varying thickness flagforrockcover : Indicates whether a raster for rock armor cover fraction is used: 0: Fixed value ( rockcoverfixed ) is applied 1: Raster file provides spatially varying cover fraction 3. Hydrologic and Numerical Parameters: fillincrement : Increment (in meters) used to raise the elevation of pits and flats during hydrologic correction. minslope : Minimum slope (m/m) considered for flow routing and calculations. expansion : Number of pixels to expand the zone of rill influence in the output. yellowthreshold : Threshold value for the factor of safety (f) below which cells are considered potentially prone to rilling. lattice_size_x , lattice_size_y : Dimensions of the DEM grid (number of columns and rows). deltax : Cell size or resolution of the DEM (in meters). nodatavalue : Value in the DEM that represents no data. smoothinglength : Size of the moving window (in pixels) used for slope smoothing. manningsn : Manning's roughness coefficient for flow calculations. depthweightfactor : Weighting factor used in the depth-based routing scheme. numberofslices : Number of slices used in the depth-based routing iteration. numberofsweeps : Number of sweeps or iterations for the entire depth-based routing process. 4. Rainfall and Rill Properties: rainfixed : Fixed rainfall intensity (mm/hr) used in the static mode. taucsoilandvegfixed : Fixed value for the critical shear stress of soil and vegetation (Pa) when not using a raster. d50fixed : Fixed value for the median rock armor diameter (m) when not using a raster. rockthicknessfixed : Fixed value for rock armor thickness (m) when not using a raster. rockcoverfixed : Fixed value for rock cover fraction when not using a raster. tanangleofinternalfriction : Tangent of the angle of internal friction for the soil. b , c : Coefficients used in the equation relating discharge to contributing area. rillwidthcoefficient , rillwidthexponent : Coefficients used to calculate rill width based on discharge. These parameters control various aspects of the Rillgen2d model, including the simulation mode, flow routing method, erosion processes, and physical properties of the landscape and rainfall. Understanding these parameters is crucial for effectively using and interpreting the model outputs.","title":"User Guide"},{"location":"gui/#user-interface","text":"","title":"User Interface"},{"location":"gui/#interface-overview","text":"The Rillgen2d interface consists of two tabs: Parameters: This tab allows you to input a DEM file, adjust model parameters, and control the execution of the simulation. User Manual: Provides detailed information about the model, parameters, and interpretation of results.","title":"Interface Overview:"},{"location":"gui/#running-a-simulation","text":"Input DEM: Web URL: Enter the URL of a GeoTIFF DEM file hosted online. Local File: Upload a GeoTIFF DEM file from your local machine. Generate Parameters: Click the \"Generate Parameters\" button to read the DEM and populate the parameter fields. Adjust Parameters: Review the default parameter values and modify them as needed based on your specific case and the information available in the User Manual. Parameters are organized into sections for model mode, routing methods, erosion properties, and hydrologic and numerical settings. Run Rillgen2d: Click the \"Run Rillgen2d\" button to start the simulation. Monitor Progress: The console output will display progress messages and any errors that occur. View Outputs: Preview: A hillshade image of the input DEM will be displayed for visual inspection. Map: An interactive map with layers for hillshade, rills, and tau (shear stress) will be generated. You can toggle layers and zoom in/out to explore the results. Save Output: Click the \"Save Output\" button to save the generated files (map, images, parameter settings) to a timestamped folder.","title":"Running a Simulation:"},{"location":"gui/#additional-tips","text":"Refer to the User Manual for detailed explanations of the parameters and their implications. Experiment with different parameter settings to understand their effects on the model outputs. Consider the limitations of the model and the uncertainties associated with the input data and parameters. By following these steps and referring to the available documentation, you can effectively use the Rillgen2d Streamlit application to analyze rill erosion potential and gain insights into landscape processes.","title":"Additional Tips:"},{"location":"gui/#input-parameters","text":"","title":"Input Parameters"},{"location":"gui/#input-parameters-for-rillgenc","text":"The input.txt file provides the necessary parameters for configuring and running the Rillgen2d model. Each line in the file specifies a parameter name, its value, and a brief description. Here's a breakdown of the parameters: 1. Model Mode and Routing: flagformode : Determines the model mode: 0: Static uniform rainfall with simple outputs (calculates factor of safety and rock thickness ratios). 1: Rainfall variable in space and/or time with complex outputs (simulates rill erosion and sediment yield). flagforroutingmethod : Specifies the flow routing method: 0: Multiple Flow Direction (MFD) 1: Depth-based routing 2: D-infinity 2. Shear Stress and Erosion Parameters: flagforshearstressequation : Selects the equation for calculating critical shear stress of rock armor: 0: Haws and Erickson (2020) equation 1: Pelletier et al. (in press) equation flagformask : Indicates whether a mask is used to define the active modeling area: 0: No mask (entire DEM is considered) 1: Mask provided (cells with mask value 0 are ignored) flagfortaucsoilandveg : Specifies whether a raster for soil and vegetation critical shear stress is used: 0: Fixed value ( taucsoilandvegfixed ) is applied 1: Raster file provides spatially varying values flagford50 : Controls the use of a raster for rock armor median diameter (d50): 0: Fixed value ( d50fixed ) is applied 1: Raster file provides spatially varying d50 values flagforrockthickness : Determines if a raster for rock armor thickness is used: 0: Fixed value ( rockthicknessfixed ) is applied 1: Raster file provides spatially varying thickness flagforrockcover : Indicates whether a raster for rock armor cover fraction is used: 0: Fixed value ( rockcoverfixed ) is applied 1: Raster file provides spatially varying cover fraction 3. Hydrologic and Numerical Parameters: fillincrement : Increment (in meters) used to raise the elevation of pits and flats during hydrologic correction. minslope : Minimum slope (m/m) considered for flow routing and calculations. expansion : Number of pixels to expand the zone of rill influence in the output. yellowthreshold : Threshold value for the factor of safety (f) below which cells are considered potentially prone to rilling. lattice_size_x , lattice_size_y : Dimensions of the DEM grid (number of columns and rows). deltax : Cell size or resolution of the DEM (in meters). nodatavalue : Value in the DEM that represents no data. smoothinglength : Size of the moving window (in pixels) used for slope smoothing. manningsn : Manning's roughness coefficient for flow calculations. depthweightfactor : Weighting factor used in the depth-based routing scheme. numberofslices : Number of slices used in the depth-based routing iteration. numberofsweeps : Number of sweeps or iterations for the entire depth-based routing process. 4. Rainfall and Rill Properties: rainfixed : Fixed rainfall intensity (mm/hr) used in the static mode. taucsoilandvegfixed : Fixed value for the critical shear stress of soil and vegetation (Pa) when not using a raster. d50fixed : Fixed value for the median rock armor diameter (m) when not using a raster. rockthicknessfixed : Fixed value for rock armor thickness (m) when not using a raster. rockcoverfixed : Fixed value for rock cover fraction when not using a raster. tanangleofinternalfriction : Tangent of the angle of internal friction for the soil. b , c : Coefficients used in the equation relating discharge to contributing area. rillwidthcoefficient , rillwidthexponent : Coefficients used to calculate rill width based on discharge. These parameters control various aspects of the Rillgen2d model, including the simulation mode, flow routing method, erosion processes, and physical properties of the landscape and rainfall. Understanding these parameters is crucial for effectively using and interpreting the model outputs.","title":"Input Parameters for rillgen.c"},{"location":"python/","text":"Installing with Anaconda (miniconda) \u00b6 `rillgen2d' graphic user interface (GUI) is built in Python with Streamlit. We use Anaconda with miniconda to build our environment with all of the necessary dependencies. We recommend using the mamba solver for faster installation over conda . We have provided three environment.yml files which can be used with conda to install Python environment on Linux (Ubuntu), Mac OS X, or Windows 10. Example install using conda and mamba : # update conda conda update -n base -c defaults conda # create new environment for rillgen2d mamba env create -f environment_linux.yml # activate conda environment conda activate rillgen2d to remove or update: # check your python version (should be 3.11.*) python --version # remove old rillgen2d environment conda remove --name rillgen2d --all # update conda environment mamba env update --prefix ./env --file environment_linux.yml --prune Starting the GUI \u00b6 Once the rillgen2d Python environment has been created, you can start the Streamlit GUI: # start the Streamlit UI python run.py Developer Documentation \u00b6 This document provides an overview of the Python files within this project and their respective functionalities. 1. rillgen2d.py \u00b6 This file contains the core logic of the Rillgen2d application. It defines the Rillgen2d class, which acts as a process and manages the execution of the rill generation model. Key Components: Rillgen2d class: Handles input parameters, file paths, and temporary directory management. Implements methods for: Converting GeoTIFF images to text format. Setting up and running the rillgen C library. Generating hillshade and color relief images. Setting georeferencing information for output files. Generating a Leaflet Folium map with interactive layers. Saving output data. Utilizes GDAL and subprocesses to interact with geospatial data and external tools. Helper functions: function_decorator : Wraps functions to handle exceptions and log messages. GetExtent , ReprojectCoords : Assist with geospatial calculations. convert_ppm : Converts PPM files to PNG for map display. 2. parameters.py \u00b6 This file defines the Parameters class, responsible for managing the input parameters of the Rillgen2d model. Key Features: Parameter fields: Defines various types of input fields using subclasses of the Field class (e.g., NumericField , FileField , OptionField ). Validation: Implements validation logic to ensure parameter values are within acceptable ranges or formats. File I/O: Handles loading parameter values from a file and saving them for later use. UI Integration: Provides methods for drawing the parameter UI elements using Streamlit. 3. frontend.py \u00b6 This file implements the Streamlit application frontend, providing the user interface for interacting with Rillgen2d. Key Functionalities: UI Tabs: Creates tabs for \"Parameters\" and \"User Manual.\" Parameter Input: Allows users to input DEM files via URL or local upload. Provides interactive widgets for adjusting model parameters. Handles parameter validation and error messages. Execution Control: Starts and stops the Rillgen2d process. Displays the console output for monitoring progress. Output Visualization: Displays a preview of the input DEM. Renders the generated map with interactive layers (hillshade, rills, tau). Provides options for saving the output data. 4. utils.py \u00b6 This file contains utility functions used by other parts of the application. Included Utilities: get_image_from_url : Downloads a GeoTIFF image from a given URL. extract_geotiff_from_tarfile : Extracts a GeoTIFF image from a tarfile. open_file_dialog : Opens a file dialog to allow users to select a local file. reset_session_state : Clears the Streamlit session state. 5. Documentation for fields.py \u00b6 The fields.py file defines the base classes and specific implementations for handling input parameters within the Rillgen2d application. It provides a framework for creating and managing various types of input fields with functionalities like UI rendering, validation, and value retrieval. Core Concepts: \u00b6 Field Abstract Class: Defines the basic interface for all parameter field types. Subclasses must implement methods for drawing UI elements, obtaining values, and validating user inputs. BaseField Data Class: Provides a common structure for storing field attributes like name, display name, help text, comment, and value. Specific Field Classes: EmptyField : A placeholder field without any UI representation or value. OptionField : Creates a dropdown selection box with a list of options. Allows conditional rendering of additional fields based on the selected option. CheckBoxField : Represents a checkbox with optional conditional fields that appear when checked. FileField : Enables users to upload files and stores the file path as the field value. NumericField : Provides a numeric input field with options for step size and display format. StaticParameter : Represents a static parameter without any UI interaction. Stores a fixed value. Functionality: \u00b6 UI Rendering: Each specific field class implements a draw method to render the appropriate UI element using Streamlit. Value Retrieval: The get_value method is used to obtain the current value of the field. Validation: The validate method checks the field value for errors and returns an error message if invalid. Conditional Fields: OptionField and CheckBoxField support conditional rendering of additional fields based on the selected option or checkbox state. Usage: \u00b6 The field classes are used within the Parameters class in parameters.py to define the input parameters for the Rillgen2d model. Each parameter is represented by an instance of a specific field class, allowing for a flexible and modular approach to parameter management. Summary \u00b6 These four Python files work together to provide a user-friendly interface for running the Rillgen2d model, visualizing its outputs, and managing its parameters. The code utilizes libraries like GDAL, Streamlit, and Folium to interact with geospatial data, build interactive visualizations, and create a user-friendly interface.","title":"Python"},{"location":"python/#installing-with-anaconda-miniconda","text":"`rillgen2d' graphic user interface (GUI) is built in Python with Streamlit. We use Anaconda with miniconda to build our environment with all of the necessary dependencies. We recommend using the mamba solver for faster installation over conda . We have provided three environment.yml files which can be used with conda to install Python environment on Linux (Ubuntu), Mac OS X, or Windows 10. Example install using conda and mamba : # update conda conda update -n base -c defaults conda # create new environment for rillgen2d mamba env create -f environment_linux.yml # activate conda environment conda activate rillgen2d to remove or update: # check your python version (should be 3.11.*) python --version # remove old rillgen2d environment conda remove --name rillgen2d --all # update conda environment mamba env update --prefix ./env --file environment_linux.yml --prune","title":"Installing with Anaconda (miniconda)"},{"location":"python/#starting-the-gui","text":"Once the rillgen2d Python environment has been created, you can start the Streamlit GUI: # start the Streamlit UI python run.py","title":"Starting the GUI"},{"location":"python/#developer-documentation","text":"This document provides an overview of the Python files within this project and their respective functionalities.","title":"Developer Documentation"},{"location":"python/#1-rillgen2dpy","text":"This file contains the core logic of the Rillgen2d application. It defines the Rillgen2d class, which acts as a process and manages the execution of the rill generation model. Key Components: Rillgen2d class: Handles input parameters, file paths, and temporary directory management. Implements methods for: Converting GeoTIFF images to text format. Setting up and running the rillgen C library. Generating hillshade and color relief images. Setting georeferencing information for output files. Generating a Leaflet Folium map with interactive layers. Saving output data. Utilizes GDAL and subprocesses to interact with geospatial data and external tools. Helper functions: function_decorator : Wraps functions to handle exceptions and log messages. GetExtent , ReprojectCoords : Assist with geospatial calculations. convert_ppm : Converts PPM files to PNG for map display.","title":"1. rillgen2d.py"},{"location":"python/#2-parameterspy","text":"This file defines the Parameters class, responsible for managing the input parameters of the Rillgen2d model. Key Features: Parameter fields: Defines various types of input fields using subclasses of the Field class (e.g., NumericField , FileField , OptionField ). Validation: Implements validation logic to ensure parameter values are within acceptable ranges or formats. File I/O: Handles loading parameter values from a file and saving them for later use. UI Integration: Provides methods for drawing the parameter UI elements using Streamlit.","title":"2. parameters.py"},{"location":"python/#3-frontendpy","text":"This file implements the Streamlit application frontend, providing the user interface for interacting with Rillgen2d. Key Functionalities: UI Tabs: Creates tabs for \"Parameters\" and \"User Manual.\" Parameter Input: Allows users to input DEM files via URL or local upload. Provides interactive widgets for adjusting model parameters. Handles parameter validation and error messages. Execution Control: Starts and stops the Rillgen2d process. Displays the console output for monitoring progress. Output Visualization: Displays a preview of the input DEM. Renders the generated map with interactive layers (hillshade, rills, tau). Provides options for saving the output data.","title":"3. frontend.py"},{"location":"python/#4-utilspy","text":"This file contains utility functions used by other parts of the application. Included Utilities: get_image_from_url : Downloads a GeoTIFF image from a given URL. extract_geotiff_from_tarfile : Extracts a GeoTIFF image from a tarfile. open_file_dialog : Opens a file dialog to allow users to select a local file. reset_session_state : Clears the Streamlit session state.","title":"4. utils.py"},{"location":"python/#5-documentation-for-fieldspy","text":"The fields.py file defines the base classes and specific implementations for handling input parameters within the Rillgen2d application. It provides a framework for creating and managing various types of input fields with functionalities like UI rendering, validation, and value retrieval.","title":"5. Documentation for fields.py"},{"location":"python/#core-concepts","text":"Field Abstract Class: Defines the basic interface for all parameter field types. Subclasses must implement methods for drawing UI elements, obtaining values, and validating user inputs. BaseField Data Class: Provides a common structure for storing field attributes like name, display name, help text, comment, and value. Specific Field Classes: EmptyField : A placeholder field without any UI representation or value. OptionField : Creates a dropdown selection box with a list of options. Allows conditional rendering of additional fields based on the selected option. CheckBoxField : Represents a checkbox with optional conditional fields that appear when checked. FileField : Enables users to upload files and stores the file path as the field value. NumericField : Provides a numeric input field with options for step size and display format. StaticParameter : Represents a static parameter without any UI interaction. Stores a fixed value.","title":"Core Concepts:"},{"location":"python/#functionality","text":"UI Rendering: Each specific field class implements a draw method to render the appropriate UI element using Streamlit. Value Retrieval: The get_value method is used to obtain the current value of the field. Validation: The validate method checks the field value for errors and returns an error message if invalid. Conditional Fields: OptionField and CheckBoxField support conditional rendering of additional fields based on the selected option or checkbox state.","title":"Functionality:"},{"location":"python/#usage","text":"The field classes are used within the Parameters class in parameters.py to define the input parameters for the Rillgen2d model. Each parameter is represented by an instance of a specific field class, allowing for a flexible and modular approach to parameter management.","title":"Usage:"},{"location":"python/#summary","text":"These four Python files work together to provide a user-friendly interface for running the Rillgen2d model, visualizing its outputs, and managing its parameters. The code utilizes libraries like GDAL, Streamlit, and Folium to interact with geospatial data, build interactive visualizations, and create a user-friendly interface.","title":"Summary"},{"location":"assets/","text":"screenshots for manual","title":"Index"}]}